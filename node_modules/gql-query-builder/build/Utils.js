"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var NestedField_1 = require("./NestedField");
var Utils = /** @class */ (function () {
    function Utils() {
    }
    Utils.resolveVariables = function (operations) {
        var ret = {};
        for (var _i = 0, operations_1 = operations; _i < operations_1.length; _i++) {
            var _a = operations_1[_i], variables = _a.variables, fields = _a.fields;
            ret = __assign(__assign(__assign({}, ret), variables), ((fields && Utils.getNestedVariables(fields)) || {}));
        }
        return ret;
    };
    // Convert object to name and argument map. eg: (id: $id)
    Utils.queryDataNameAndArgumentMap = function (variables) {
        return variables && Object.keys(variables).length
            ? "(" + Object.entries(variables).reduce(function (dataString, _a, i) {
                var key = _a[0], value = _a[1];
                return "" + dataString + (i !== 0 ? ", " : "") + (value && value.name ? value.name : key) + ": $" + key;
            }, "") + ")"
            : "";
    };
    Utils.queryFieldsMap = function (fields) {
        var _this = this;
        return fields
            ? fields
                .map(function (field) {
                if (NestedField_1.isNestedField(field)) {
                    return Utils.queryNestedFieldMap(field);
                }
                else if (typeof field === "object") {
                    var values = Object.values(field)[0];
                    return Object.keys(field)[0] + " " + (values.length > 0
                        ? "{ " + _this.queryFieldsMap(values) + " }"
                        : "");
                }
                else {
                    return "" + field;
                }
            })
                .join(", ")
            : "";
    };
    Utils.queryNestedFieldMap = function (field) {
        return field.operation + " " + this.queryDataNameAndArgumentMap(field.variables) + " " + (field.fields.length > 0
            ? "{ " + this.queryFieldsMap(field.fields) + " }"
            : "");
    };
    // Variables map. eg: { "id": 1, "name": "Jon Doe" }
    Utils.queryVariablesMap = function (variables, fields) {
        var variablesMapped = {};
        var update = function (vars) {
            if (vars) {
                Object.keys(vars).map(function (key) {
                    variablesMapped[key] =
                        typeof vars[key] === "object" ? vars[key].value : vars[key];
                });
            }
        };
        update(variables);
        if (fields && typeof fields === "object") {
            update(Utils.getNestedVariables(fields));
        }
        return variablesMapped;
    };
    Utils.getNestedVariables = function (fields) {
        var variables = {};
        fields === null || fields === void 0 ? void 0 : fields.forEach(function (field) {
            if (NestedField_1.isNestedField(field)) {
                variables = __assign(__assign(__assign({}, field.variables), variables), (field.fields && Utils.getNestedVariables(field.fields)));
            }
        });
        return variables;
    };
    Utils.queryDataType = function (variable) {
        var type = "String";
        var value = typeof variable === "object" ? variable.value : variable;
        if ((variable === null || variable === void 0 ? void 0 : variable.type) != null) {
            type = variable.type;
        }
        else {
            // TODO: Should handle the undefined value (either in array value or single value)
            var candidateValue = Array.isArray(value) ? value[0] : value;
            switch (typeof candidateValue) {
                case "object":
                    type = "Object";
                    break;
                case "boolean":
                    type = "Boolean";
                    break;
                case "number":
                    type = candidateValue % 1 === 0 ? "Int" : "Float";
                    break;
            }
        }
        // set object based variable properties
        if (typeof variable === "object") {
            if (variable.list === true) {
                type = "[" + type + "]";
            }
            else if (Array.isArray(variable.list)) {
                type = "[" + type + (variable.list[0] ? "!" : "") + "]";
            }
            if (variable.required) {
                type += "!";
            }
        }
        return type;
    };
    return Utils;
}());
exports.default = Utils;
//# sourceMappingURL=Utils.js.map